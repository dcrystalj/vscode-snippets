{
	// Place your snippets for cpp here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Init": {
		"prefix": "init",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"#define endl \"\\n\"",
			"#define LL long long",
			"#define ALL(x) x.begin(), x.end()",
			"template<typename... Args>",
			"void cline(Args... args){ ((cout << args << \" \"), ...); cout << endl;}",
			"",
			"void solve() {",
			"\t$0"
			"}",
			"",
			"",
			"int main()",
			"{  ",
			"  ios_base::sync_with_stdio(false);",
			"  cin.tie(NULL);",
			"  solve();",
			"  return 0;",
			"}"
		]
	},
	"Init with t cases": {
		"prefix": "initt",
		"body": [
			"#include <bits/stdc++.h>",
			"",
			"using namespace std;",
			"",
			"#define endl \"\\n\"",
			"#define LL long long",
			"#define ALL(x) x.begin(), x.end()",
			"template<typename... Args>",
			"void cline(Args... args){ ((cout << args << \" \"), ...); cout << endl;}",
			"",
			"void solve() {",
			"\t$0"
			"}",
			"",
			"",
			"int main()",
			"{  ",
			"  ios_base::sync_with_stdio(false);",
			"  cin.tie(NULL);",
			"  LL t; cin >> t;",
			"  for (LL i = 0; i < t; i++) {",
			"    solve();",
			"  }",
			"  return 0;",
			"}"
		]
	},
	"For_Loop_i": {
		"prefix": "fori",
		"body": [
			"for (LL ${1:i} = ${2:0}; ${1} < ${3:n}; ${1}++) {",
			"\t$0",
			"}"
		],
		"description": "For Incrementing Loop"
	},
	"For_Loop_j": {
		"prefix": "ford",
		"body": [
			"for (LL ${1:i} = ${2:n}-1; ${1} >= ${3:0}; ${1}--) {",
			"\t$0",
			"}"
		],
		"description": "For Decrementing Loop"
	},
	"For_Loop_ read input to vector": {
		"prefix": "forv",
		"body": [
			"for (LL i = 0; i < ${1:n}; i++) {",
			"\tcin >> ${2:v}[i];",
			"}"
		],
		"description": "For reading inupt to vector"
	},
	"cout line": {
		"prefix": "cl",
		"body": [
			"cout << ${1} << endl;",
		],
	},
	"cout space": {
		"prefix": "csp",
		"body": [
			"<< \" \" << ",
		]
	},
	"cin": {
		"prefix": "ci",
		"body": [
			"cin >> ${1};",
		],
	},
	"define vector": {
		"prefix": "vv",
		"body": [
			"vector<${1:LL}> ${2:v} (${3:n});"
		]
	}
}